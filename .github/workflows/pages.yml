# Workflow file for deploying a Jekyll site to GitHub Pages using GitHub Actions

name: Deploy Jekyll with GitHub Pages dependencies preinstalled

on:
  # Trigger on push to the default branch
  push:
    branches: ["main"]

  # Allows manual triggering of the workflow
  workflow_dispatch:

# Define permissions for the GITHUB_TOKEN
permissions:
  contents: read
  pages: write
  id-token: write

# Prevent multiple deployments from running simultaneously
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # Build job to generate the Jekyll site
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository code
      - name: Checkout
        uses: actions/checkout@v3

      # Step 2: Clean up any leftover build output from previous runs
      - name: Cleanup build output
        run: rm -rf ./_site

      # Step 3: Set up GitHub Pages configuration
      - name: Setup Pages
        uses: actions/configure-pages@v2

      # Step 4: Build the site with Jekyll
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./         # Source directory (root of your site)
          destination: ./_site  # Output directory for Jekyll build

      # Step 5: Upload the compiled site as an artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: github-pages
          path: ./_site

  # Deployment job to upload the site to GitHub Pages
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Step 1: Download the artifact from the build job
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: github-pages
          path: ./_site

      # Step 2: Verify the size and contents of the artifact
      - name: Check artifact size
        run: du -sh ./_site

      # Step 3: Ensure there are no hard links or symlinks in the site
      # This will produce a list of symlinks, if any exist
      - name: Check for symlinks
        run: |
          if find ./_site -type l | read; then
            echo "Error: Symlinks found in build output. Please remove them."; 
            exit 1;
          fi

      # Step 4: Deploy the site to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4